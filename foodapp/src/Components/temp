// import React, { useContext, useState } from "react";
// import { Link } from "react-router-dom";
// import { FaHeart } from "react-icons/fa";
// import { AuthContext } from "../contexts/AuthProvider";
// import Swal from "sweetalert2";

// const Cards = ({ item }) => {
//   const { name, image, price, recipe, _id } = item;
//   const [isHeartFilled, setHeartFilled] = useState(false);
//   const { user } = useContext(AuthContext);

//   const handleAddToCart = (item) => {
//     console.log("add to cart clokced", item);
//     if (user && user?.email) {
//       const cartItem = {
//         menuItemId: _id,
//         name,
//         quantity: 1,
//         image,
//         price,
//         email: user.email,
//       };
//       // console.log(cartItem);
//       fetch("http://localhost:3001/carts", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//           Accept: "application/json",
//         },
//         body: JSON.stringify(cartItem),
//       })
//         .then((res) => res.json())
//         .then((data) => {
//           if (data.insertedId) {
//             Swal.fire({
//               position: "top-end",
//               icon: "success",
//               title: "Your work has been saved",
//               showConfirmButton: false,
//               timer: 1500,
//             });
//           }
//           // console.log(data);
//         });
//     }
//   };

//   const handleHeartClick = () => {
//     setHeartFilled(!isHeartFilled);
//   };

//   return (
//     <div className="card w-96 bg-base-100 shadow-xl relative">
//       <div
//         className={`rating gap-1 absolute right-2 top-2 p-4 heartStar bg-blue ${
//           isHeartFilled ? "text-rose-500" : "text-white"
//         }`}
//         onClick={handleHeartClick}
//       >
//         <FaHeart className="h-5 w-5 cursor-pointer " />
//       </div>
//       <Link to={`/menu/${item._id}`}>
//         <figure>
//           <img
//             src={item.image}
//             className="hover:scale-105 transition-all duration-200 md:h-32 md:w-42 gap-10 "
//           />
//         </figure>
//       </Link>
//       <div className="card-body">
//         <h2 className="card-title">{item.title}</h2>
//         <Link to={`/menu/${item._id}`}></Link>
//         <p>{item.recipe}</p>
//         <div className="card-actions justify-between items-center mt-2">
//           <h5 className="font-semibold">
//             <span className="text-sm text-red">$</span>
//             {item.price}
//           </h5>
//           <button
//             className="btn bg-blue text-white"
//             onClick={() => handleAddToCart(item)}
//           >
//             Buy Now
//           </button>
//         </div>
//       </div>
//     </div>
//   );
// };

// export default Cards;

// const express = require("express");
// const app = express();
// const cors = require("cors");
// const PORT = process.env.PORT || 3001;
// require("dotenv").config();
// console.log(process.env.DB_USER);
// console.log(process.env.DB_PASSWORD);

// // username : arfainsabasaba
// // password: wT6LLthr8viEa3vE

// // middlewares
// app.use(cors());
// app.use(express.json());

// const { MongoClient, ServerApiVersion } = require("mongodb");
// const uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASSWORD}@cluster0.gctiqmx.mongodb.net/?retryWrites=true&w=majority`;

// // Create a MongoClient with a MongoClientOptions object to set the Stable API version
// const client = new MongoClient(uri, {
//   serverApi: {
//     version: ServerApiVersion.v1,
//     strict: true,
//     deprecationErrors: true,
//   },
// });

// async function run() {
//   try {
//     console.log("attempting to connect");
//     await client.connect();
//     console.log("connected");

//     // databases and collections
//     const menuCollections = client.db("foodappdb").collection("menus");

//     const cartCollections = client.db("foodappdb").collection("cartItems");

//     // all menu items
//     app.get("/menu", async (req, res) => {
//       console.log("reached to menu route");
//       const result = await menuCollections.find().toArray();
//       res.send(result);
//     });

//     // all alerts opr
//     app.post("/carts", async (req, res) => {
//       // const cartItem = req.body;
//       // const result = await cartCollections.insertOne(cartItem);
//       // res.send(result);
//       try {
//         const cartItem = req.body;
//         const result = await cartCollections.insertOne(cartItem);
//         res.json(result); // Return the result as JSON
//       } catch (error) {
//         console.error("Error in /carts route:", error);
//         res.status(500).json({ error: "Internal Server Error" }); // Return an error JSON
//       }
//     });

//     // Send a ping to confirm a successful connection
//     await client.db("admin").command({ ping: 1 });
//     console.log(
//       "Pinged your deployment. You successfully connected to MongoDB!"
//     );
//   } finally {
//     // await client.close();
//   }
// }
// run().catch(console.dir);

// app.get("/", (req, res) => {
//   res.send("hello world!");
// });

// // Log all registered routes
// // console.log("Registered Routes:", app._router.stack);

// app.listen(PORT, () => {
//   console.log(`App started on port: ${PORT}`);
// });
